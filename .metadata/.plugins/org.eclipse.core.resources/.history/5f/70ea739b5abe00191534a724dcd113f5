package com.saurabh.dada.iq.impl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicInteger;

public class Concurrent_AtomicInteger {

	public static void main(String[] args) throws InterruptedException {
		
		try {
			ProcessingThread pt = new ProcessingThread();
			Thread t1 = new Thread(pt, "t1");
			t1.start();
			Thread t2 = new Thread(pt, "t2");
			t2.start();
			t1.join();
			t2.join();
			System.out.println("Processing count=" + pt.getCount());
		}
		catch(Exception e) {
			
		}
       
    }

}

class ProcessingThread implements Runnable {
    private AtomicInteger count = new AtomicInteger();
    private int countI;
    
    @Override
    public void run() {
        for (int i = 0; i < 1000; i++) {
            processSomething(i);
            count.incrementAndGet();
            countI++;
        }
    }

    public int getCount() {
        return this.count.get();
    }

    private void processSomething(int i) {
        // processing some job
        try {
            Thread.sleep(i * 180);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

}