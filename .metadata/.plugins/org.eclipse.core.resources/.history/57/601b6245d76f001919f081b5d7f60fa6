package com.yadas.code.java.ds;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.Stack;

public class XBinaryTree<T extends Comparable<T>> {
	
	private Node<T> root = null;
	private boolean debug = false;
	
	public XBinaryTree() {
		super();
	}
	public XBinaryTree(boolean debug) {
		super();
		this.debug = debug;
	}
	
	public void boundaryTraversal() {
		boundaryTraversal(root);
	}
	
	private void boundaryTraversal(Node<T> node) {
		LinkedList<Node<T>> ll = new LinkedList<Node<T>>();
		LinkedList<Node<T>> llR = new LinkedList<Node<T>>();
		Queue<Node<T>> queue = new LinkedList<Node<T>>();
		queue.add(node);
		queue.add(null);
		ll.add(null);
		int lastNullAt = -1;
		int i = 0;
		while (!queue.isEmpty()) {
			Node<T> curr = queue.poll();
			if (curr == null) {
				if (!queue.isEmpty()) {
					System.out.println();
					queue.add(null);
					ll.add(null);					
					i++;
					lastNullAt = i;
				}
			} 
			else {
				if(ll.get(ll.size()-1)==null && curr!=null) {
					System.out.print(curr.data + "~   ");
				}
				ll.add(curr);
				i++;
				if (curr.left != null)
					queue.add(curr.left);
				if (curr.right != null)
					queue.add(curr.right);
			}
			//System.out.println("\nbQueue1.1: " + ll);
		}
		System.out.println("\nbQueue1: " + ll);
		System.out.println("lastNullAt: " + lastNullAt);
		for(int j=lastNullAt+2;j<ll.size();j++) {
			System.out.print(ll.get(j).data + "~   ");
		}

		
	}
	
	public void diagonalOrderTraversal() {
		Map<Integer, List<T>> diagonalLevelMap = new HashMap<Integer, List<T>>();
		diagonalOrderTraversal(root, diagonalLevelMap, 0);
		for(Integer key: diagonalLevelMap.keySet()) {
			System.out.println("@ slope " + key + ":\t" + diagonalLevelMap.get(key).toString().trim());
		}
		
	}
	private void diagonalOrderTraversal(Node<T> node, Map<Integer, List<T>> diagonalLevelMap ,int slope) {
		if(node!=null) {
			List<T> list = diagonalLevelMap.get(slope);
			if(list==null) {
				list = new ArrayList<T>();
				list.add(node.data);
				diagonalLevelMap.put(new Integer(slope), list);
			}
			else {
				list.add(node.data);
			}
			
			diagonalOrderTraversal(node.right, diagonalLevelMap, slope);
			diagonalOrderTraversal(node.left, diagonalLevelMap, slope-1);
		}
	}
	
	public void reverseAlternativeLevels() {
		reverseAlternativeLevels(root,0);
	}
	private void reverseAlternativeLevels(Node<T> node, int level) {
		Queue<Node<T>> queue = new LinkedList<Node<T>>();
		queue.add(node);
		queue.add(null);
		Queue<Node<T>> evenLevelQueue = new LinkedList<Node<T>>();
		Queue<Node<T>> oddLevelQueue = new LinkedList<Node<T>>();
		while (!queue.isEmpty()) {
			Node<T> curr = queue.poll();
			if (curr == null) {
				if (!queue.isEmpty()) {
					System.out.println();
					queue.add(null);
					if(level%2!=0) //odd level
						oddLevelQueue.add(null);
					else
						evenLevelQueue.add(null);
					level++;
				}
			} 
			else {
				if(level%2!=0) //odd level
					oddLevelQueue.add(curr);
				else
					evenLevelQueue.add(curr);
				if (curr.left != null)
					queue.add(curr.left);
				if (curr.right != null)
					queue.add(curr.right);
			}
			
		}
		oddLevelQueue.add(null);
		evenLevelQueue.add(null);
		//List<Node<T>> eList = new ArrayList<XBinaryTree.Node<T>>();
		while(!evenLevelQueue.isEmpty()) {
			List<Node<T>> listEven = getLevelNodesAsList(evenLevelQueue, false);
			List<Node<T>> listOdd = getLevelNodesAsList(oddLevelQueue, true);
			int j=0;
			for(int i=0;i<listEven.size();i++) {
				Node<T> currE = listEven.get(i);
				Node<T> currO1 = listOdd.get(j);
				currE.setLeft(currO1);
				j=j+1;
				Node<T> currO2 = listOdd.get(j);
				currE.setRight(currO2);
				j=j+1;
			}
			List<Node<T>> listEven2 = getLevelNodesAsListWithoutRemoving(evenLevelQueue);
			j=0;
			for(int i=0;i<listOdd.size()&&listEven2.size()>0;i++) {
				Node<T> currO = listOdd.get(i);
				Node<T> currE1 = listEven2.get(j);
				currO.setLeft(currE1);
				j=j+1;
				Node<T> currE2 = listEven2.get(j);
				currO.setRight(currE2);
				j=j+1;
			}
		}
		
//		System.out.println("Even Level: ");
//		while(!evenLevelQueue.isEmpty()) {
//			Node<T> n1 = evenLevelQueue.poll();
//			if(n1!=null)
//				System.out.print(n1.data + "  ");
//			else
//				System.out.println();
//		}
//		System.out.println("\nOdd Level: ");
//		Stack<Node<T>> stack = new Stack<>();
//		while(!oddLevelQueue.isEmpty()) {
//			Node<T> n1 = oddLevelQueue.poll();
//			if(n1!=null) {
//				stack.add(n1);
//				System.out.print(n1.data + "  ");
//			}
//			else
//				System.out.println();
//		}
//		System.out.println();
		
		
	}
	
	private List<Node<T>> getLevelNodesAsListWithoutRemoving(Queue<Node<T>> levelQueue){
		List<Node<T>> list = new ArrayList<XBinaryTree.Node<T>>();
		for(Node<T> item: levelQueue) {
			if(item==null)
				break;
			else
				list.add(item);
		}
		return list;
	}
	private List<Node<T>> getLevelNodesAsList(Queue<Node<T>> levelQueue, boolean reverse){
		List<Node<T>> list = new ArrayList<XBinaryTree.Node<T>>();
		while(!levelQueue.isEmpty()) {
			Node<T> n1 = levelQueue.poll();
			if(n1!=null) {
				list.add(n1);
			}
			else
				break;
		}
		if(reverse) {
			Collections.reverse(list);
		}
		return list;
	}
	
	public boolean isSymmetric() {
		return isSymmetric(root,root);
	}
	private boolean isSymmetric(Node<T> left,Node<T> right) {
		if(left==null&&right==null)
			return true;
		else if(left!=null && right!=null) {
			System.out.println("comparing1 " + left.left + " & " + right.right);
			System.out.println("comparing2 " + left.right + " & " + right.left);
			if(isSymmetric(left.left,right.right) && isDataSame(left.left, right.right) && isSymmetric(left.right, right.left) && isDataSame(left.right, right.left)) {
				return true;
			}
			else
				return false;
		}
		else
			return false;
	}
	private boolean isDataSame(Node<T> n1, Node<T> n2) {
		if(n1==null&&n2==null)
			return true;
		if(n1!=null && n2!=null && n1.data.compareTo(n2.data)==0)
			return true;
		else
			return false;
	}
	
	public void mirror() {
		mirror(root);
	}
	private void mirror(Node<T> node) {
		if(node==null)
			return;
		else {
			swapLeftAndRightNodes(node);
			mirror(node.left);
			mirror(node.right);
		}
	}
	public void swapLeftAndRightNodes(Node<T> node) {
		if(node!=null) {
			Node<T> temp = node.left;
			node.left = node.right;
			node.right = temp;
		}
	}
	
	public boolean isMirror() {
		return isMirror(root);
	}
	private boolean isMirror(Node<T> node) {
		if(node==null)
			return true;
		if(isStructureSame(node.left, node.right))
			return true;
		else
			return false;
	}
	private boolean isStructureSame(Node<T> n1, Node<T> n2) {
		if(n1==null && n2==null)
			return true;
		if(n1!=null && n2!=null && isStructureSame(n1.left, n2.right) && isStructureSame(n1.right, n2.left)) {
			return true;
		}
		else
			return false;
	}
	public boolean isContinuousTree() {
		return isContinuous(root);
	}
	private boolean isContinuous(Node<T> node) {
		if(node.left!=null && node.right==null) {
			return true;
		}
		if(node.left==null) {
			return (Math.abs(Integer.parseInt(node.data.toString())-Integer.parseInt(node.right.data.toString())) == 1)&& isContinuous(node.right);
		}
		if(node.right==null) {
			return (Math.abs(Integer.parseInt(node.data.toString())-Integer.parseInt(node.left.data.toString())) == 1)&& isContinuous(node.left);
		}
		return (Math.abs(Integer.parseInt(node.data.toString())-Integer.parseInt(node.left.data.toString())) == 1) && (Math.abs(Integer.parseInt(node.data.toString())-Integer.parseInt(node.right.data.toString())) == 1);
	}
	
	public void insert(T data) {
		if(root==null) {
			root = new Node<>(data, debug);
			if(debug)
				System.out.println("Added: " + root);
		}
		else {
			//do level order traversal and find the correct place to insert
			Queue<Node<T>> q = new LinkedList<>();
			q.add(root);
			while(!q.isEmpty()) {
				Node<T> t = q.poll();
				if(t.left==null) {
					t.left = new Node<T>(data, debug);
					if(debug)	
						System.out.println("Added: " + t.left);
					break;
				}
				else
					q.add(t.left);
				if(t.right==null) {
					t.right = new Node<T>(data, debug);
					if(debug)
						System.out.println("Added: " + t.right);
					break;
				}
				else
					q.add(t.right);
			}
		}
	}
	
	public void insert2(T data) {
		root = insert2(root, data);
	}
	private Node<T> insert2(Node<T> node, T data) {
		if(node==null)
			node = new Node<>(data);
		else {
			if(node.left==null)
				node.left=insert2(node.left, data);
			else
				node.right=insert2(node.right, data);
		}
		return node;
	}
	public void levelOrderTraversalOrBFSLineByLine() {
		System.out.println("Level Order Traversal: ");
		if(root!=null)
			breadthFirstSearchLineByLine(root);
		System.out.println();
	}
	
	private void breadthFirstSearchLineByLine(Node<T> node) {
		Queue<Node<T>> queue = new LinkedList<Node<T>>();
		queue.add(node);
		queue.add(null);
		while (!queue.isEmpty()) {
			Node<T> curr = queue.poll();
			if (curr == null) {
				if (!queue.isEmpty()) {
					System.out.println();
					queue.add(null);
				}
			} 
			else {
					System.out.print(curr.data + "\t");
					if (curr.left != null)
						queue.add(curr.left);
					if (curr.right != null)
						queue.add(curr.right);
			}
		}
	}
	
	public void inOrderTraversal() {
		System.out.print("Inoder Traversal: \t");
		inOrderTraversal(root);
		System.out.println();
	}
	public void preOrderTraversal() {
		System.out.print("Preorder Traversal: \t");
		preOrderTraversal(root);
		System.out.println();
	}
	public void postOrderTraversal() {
		System.out.print("Postorder Traversal: \t");
		postOrderTraversal(root);
		System.out.println();
	}
	private void inOrderTraversal(Node<T> node) {
		if(node!=null) {
			inOrderTraversal(node.left);
			System.out.print(node);
			inOrderTraversal(node.right);
		}
	}
	private void preOrderTraversal(Node<T> node) {
		if(node!=null) {
			System.out.print(node);
			preOrderTraversal(node.left);
			preOrderTraversal(node.right);
		}
	}
	private void postOrderTraversal(Node<T> node) {
		if(node!=null) {
			postOrderTraversal(node.left);
			postOrderTraversal(node.right);
			System.out.print(node);
		}
	}
	
	public static class Node<T extends Comparable<T>>{
		private Node<T> left = null;
		private Node<T> right = null;
		private T data = null;
		private boolean debug = false;
		
		public Node() {
			super();
		}
		public Node(T data) {
			super();
			this.data = data;
		}
		public Node(T data, boolean debug) {
			super();
			this.data = data;
			this.debug = debug;
		}
		
		public Node<T> getLeft() {
			return left;
		}
		public void setLeft(Node<T> left) {
			this.left = left;
		}
		public Node<T> getRight() {
			return right;
		}
		public void setRight(Node<T> right) {
			this.right = right;
		}
		public T getData() {
			return data;
		}
		public void setData(T data) {
			this.data = data;
		}
		@Override
		public String toString() {
			if(debug)
				return "" + data + " @ " + this.hashCode() + "";
			else
				return "" + data + "\t";
		}
	}

}
