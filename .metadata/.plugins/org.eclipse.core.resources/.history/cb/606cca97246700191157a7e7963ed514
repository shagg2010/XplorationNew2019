package com.yadas.code.java.ds;

import java.util.LinkedList;
import java.util.Queue;

public class XBinaryTree<T extends Comparable<T>> {
	
	private Node<T> root = null;
	
	
	public boolean isMirror() {
		
	}
	private boolean isMirror(Node<T> node) {
		if(node==null)
			return true;
		if(isStructureSame(node.left, node.right))
			return true;
	}
	private boolean isStructureSame(Node<T> n1, Node<T> n2) {
		
	}
	public boolean isContinuousTree() {
		return isContinuous(root);
	}
	private boolean isContinuous(Node<T> node) {
		if(node.left!=null && node.right==null) {
			return true;
		}
		if(node.left==null) {
			return (Math.abs(Integer.parseInt(node.data.toString())-Integer.parseInt(node.right.data.toString())) == 1)&& isContinuous(node.right);
		}
		if(node.right==null) {
			return (Math.abs(Integer.parseInt(node.data.toString())-Integer.parseInt(node.left.data.toString())) == 1)&& isContinuous(node.left);
		}
		return (Math.abs(Integer.parseInt(node.data.toString())-Integer.parseInt(node.left.data.toString())) == 1) && (Math.abs(Integer.parseInt(node.data.toString())-Integer.parseInt(node.right.data.toString())) == 1);
	}
	
	public void insert(T data) {
		if(root==null) {
			root = new Node<>(data);
		}
		else {
			//do level order traversal and find the correct place to insert
			Queue<Node<T>> q = new LinkedList<>();
			q.add(root);
			while(!q.isEmpty()) {
				Node<T> t = q.poll();
				if(t.left==null) {
					t.left = new Node<T>(data);
					break;
				}
				else
					q.add(t.left);
				if(t.right==null) {
					t.right = new Node<T>(data);
					break;
				}
				else
					q.add(t.right);
			}
		}
	}
	
	public void insert2(T data) {
		root = insert2(root, data);
	}
	private Node<T> insert2(Node<T> node, T data) {
		if(node==null)
			node = new Node<>(data);
		else {
			if(node.left==null)
				node.left=insert2(node.left, data);
			else
				node.right=insert2(node.right, data);
		}
		return node;
	}
	
	public void inOrderTraversal() {
		System.out.print("\nInoder Traversal: \t");
		inOrderTraversal(root);
	}
	public void preOrderTraversal() {
		System.out.print("\nPreorder Traversal: \t");
		preOrderTraversal(root);
	}
	public void postOrderTraversal() {
		System.out.print("\nPostorder Traversal: \t");
		postOrderTraversal(root);
	}
	private void inOrderTraversal(Node<T> node) {
		if(node!=null) {
			inOrderTraversal(node.left);
			System.out.print(node);
			inOrderTraversal(node.right);
		}
	}
	private void preOrderTraversal(Node<T> node) {
		if(node!=null) {
			System.out.print(node);
			preOrderTraversal(node.left);
			preOrderTraversal(node.right);
		}
	}
	private void postOrderTraversal(Node<T> node) {
		if(node!=null) {
			postOrderTraversal(node.left);
			postOrderTraversal(node.right);
			System.out.print(node);
		}
	}
	
	public static class Node<T extends Comparable<T>>{
		private Node<T> left = null;
		private Node<T> right = null;
		private T data;
		
		public Node() {
			super();
		}
		public Node(T data) {
			super();
			this.data = data;
		}
		
		public Node<T> getLeft() {
			return left;
		}
		public void setLeft(Node<T> left) {
			this.left = left;
		}
		public Node<T> getRight() {
			return right;
		}
		public void setRight(Node<T> right) {
			this.right = right;
		}
		public T getData() {
			return data;
		}
		public void setData(T data) {
			this.data = data;
		}
		@Override
		public String toString() {
			return "" + data + "\t";
		}
	}

}
