package com.saurabh.dada.iq.impl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicInteger;

public class Concurrent_AtomicInteger {

	public static void main(String[] args) throws InterruptedException {
		
		try {
			
		}
		catch(Exception e) {
			
		}
        ProcessingThread pt = new ProcessingThread();
        Thread t1 = new Thread(pt, "t1");
        t1.start();
        Thread t2 = new Thread(pt, "t2");
        t2.start();
        t1.join();
        t2.join();
        System.out.println("Processing count=" + pt.getCount());
    }

}

class MyThread extends Thread {
	Counter counter;

	MyThread(Counter counter) {
		this.counter = counter;
	}

	public void run() {
		for (int x = 0; x < 1000; x++) {
			counter.incrementCount();
		}
	}
}

// class that uses AtomicInteger for counter
class Counter {

	private AtomicInteger count = new AtomicInteger(0);
	private int i = 0;

	public void incrementCount() {
		i++;
		count.incrementAndGet();
	}

	public int getICount() {
		return i;
	}
	public int getCount() {
		return count.get();
	}
}